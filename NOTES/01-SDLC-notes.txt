


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SDLC - SOFTWARE DEVELOPMENT LIFECYCLE
>The process of taking an idea and turning it into a full functioning project
>or to put it another way; the process of developing a piece of software from begining to end.



>>>>There are many types of SDLCs out there
>Here , we'll talk about two specifically
	>Waterfall
	>Agile SCRUM





>>>>>>Let's take a look at waterfall first:
> https://www.w3schools.in/wp-content/uploads/2019/02/SDLC-Waterfall-Model.png




Issues with waterfall?
-what happens if you finish implementation and during testing you find out the whole system is shaky, and not scalable?
-what happens if you finish the entire product and find out you misunderstood what the product owner wants?
-what happens if you finish the entire product and find out the market has shifted and the product is no longer viable?



How do we fix this?
-more frequent feedback. Instead of waiting until the whole product is complete, we can get feedback from
management and the product owner more frequently so that we may course correct.




>>>>>>>>>>NOW, let's take a look at Agile SCRUM (SCRUM is a specific implementation of Agile methodologies)
> https://cdn.educba.com/academy/wp-content/uploads/2019/03/scrum-1.png



SCRUM uses 1-4 week sprints to develop applications (most often 2 weeks)
EACH sprint itself is a miniature waterfall model. We iterate through sprints until the product is completed.

Agile SCRUM allows the team to more easily course correct issues because they have more information about the
state of the product.

------






---------
SCRUM actors/entities:
	-Product Owner-			-Business Analysts-				-SCRUM Master- 				 -The Dev Team-
	The idea person.		Translators for the dev team	Servant Leader				This is us. The devs.



(note: scrum master is tasked with keeping the team on track and making sure they have all the resources they need
to be successful. They are NOT the boss.)

(note: business analysts [BAs] are tasked with translating the product owner's ideas into user stories that the dev team AND the product owner can follow)



-----------------
SCRUM documents:
	

	-Product Backlog-					-Sprint Backlog-							-Burndown Chart-



The product backlog is a list of ALL the features of the ENTIRE application. YOur Business Analysts (BAs) will
sit with the Product Owner and the Dev Team and translate all of the business requirements into USER STORIES so
that the dev team and the product owner can understand the requirement, and the dev team and begin implementation.



If the product backlog is a list of ALL userstories in the entire application, then the sprint backlog is a list
of all userstories that the team plans on implementing during this specific sprint. At the beginning of each sprint you will
meet with the team and determine the highest priority user stories and craft a reasonably sized sprint.



Example of a burndown chart:
> https://upload.wikimedia.org/wikipedia/commons/8/8c/Burn_down_chart.png

In general, the burndown chart is a chart that visualizes how many work hours have been completed in the product backlog.
The downchart velocity  will give you an idea of WHEN you will complete the project; whether it's ahead of time...or worse....behind schedule.









----------
What is a USER STORY?
-it's essentially a granular/atomic business requirement written out in a sentence so that all parties involved 
	(even non-devs) can understand what the requirements are.
	
A user story is structured like:
	As a [ROLE], I can [ACTION] so that [RESULT]
	
Example 1:
	As an Admin, I can approve a reimbursement so that employees can get refunds.
Example 2:
	As a User, I can modify my credit card information so that I can continue to make purchases.




Each user story will have a weight to it. For example, a userstory could have a weight of "2 hours" or "4 hours".
Don't make the weights things like "4.89 hours"; try to round to reasonable numbers lke 1hour, 2hours, 4 hours, 8 hours, 2 days, and so on.

From this point we know how many devs are on the team, and we know the amount of working hours each dev has in a week. SO we can reasonably
calculate how long the product will take to implement.





---------------
SCRUM ceremonies/meetings:
			-Sprint Planning-					-Daily Standups/SCRUM-				-sprint review/retrospective-



The sprint planning is when you plan the sprint backlog with your team. It's the meeting at the beginning of EACH sprint to make sure you
execute a sprint in an organized fashion. (roughly every two weeks or in other words the beginning of every sprint)




The daily standup is a QUICK daily meeting with your entire team. You need to tell the team what you've done since the last daily meeting,
what you plan on doing today, and if you have any BLOCKERS.

(A blocker is an issue that prohibits you from making any future progress.)



The sprint review is when you bring in the product owner and review all the implemented features. Note, that at the end of each
sprint the product should be in a "POTENTIALLY SHIPPABLE STATE". This is so that you can demo the product AND if the product owner is happy
with the current state when you can begining the process of shipping the product. (The focus here in the sprint review is on the product and
the product owner)

The sprint retrospective is focused on the team. AFter the product owner leaves your team needs to figure out what things WORKED and
what things DIDN'T WORK for the previous sprint. You use this information to learn from previous sprints and course correct any issues
that may have arised with the team. (example: the git repository flow is slowing down the  productivity by a significant margin, we need to
modify the process.)











------------KANBAN BOARDS-


trello may be useful for keeping track of your usertories and organizing with your team:
https://trello.com/en-US

an example of a trello board for a game I play called phasmophobia:
https://trello.com/b/9QrnqQ1j/phasmophobia

There are many Kanban boards out there, for example Jira







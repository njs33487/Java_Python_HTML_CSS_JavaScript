

>>>>>>>>>>>>>>>>>>>>>>>>>>>>What is a repository?
>A repository is a place where you store "things"



>>>>>>>>>What is git?
>Git is a version control system (VCS) and callaboration tool. In short, it's a tool that manages file history/versions (e.g. source code files)
>It keeps track of changes and provides tools to share that content.



>>>>>>>>>What is gitbash?
>it's a terminal that lets you use git commands
>it contains features that make working with git easier



>>>>>>>>>What is gitlab/github?
>Github/Gitlab are online git hosting services. Hosting services can also supply additional tools that make collaboration even easier;
	each host may have differences in service they provide. Capitalism, amirite?




>>>>>>>>>>>>>>>>>What is a distributed VCS vs a central VCS?

>A CENTRAL VCS: uses a central location to store all source code, data, and records. There are some issues with this, however. What happens if you lose internet connection? Or the website goes down? You don't have access to your data anymore.

>A DISTRIBUTED VCS: creates a COPY of the source code on each user's machine. That way, if you lose internet you can STILL work or see the most recent changes you "pulled" are. And if you make changes to your LOCAL version of the code base, then you "push" those changes to an online host so that your team members may "pull" your changes.

Git is a distributed VCS.



>>>>>>>>>>>>>>>>>>What are the three areas in git?

WORKING DIRECTORY - the current experimental modifications to the file system in the repository

STAGING AREA - contains all the files that are currently "marked" to be the NEXT official version, or to put it
	another way these files will be the NEXT "HEAD".
	(you can see what's in the staging area if you do "git status", all green files are staged for a future commit)

HEAD - the current and most recent official version
	(you can see what's in the working directory if you do "git status", all red files are NOT staged for a future commit)





>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>The Git Command Line Interface

git comamnds we'll be using:

git status		check the current state of git's file tracking
git config		is used to modify git's configurations
		git config --global user.email "asfasdfas@asfaij.com"
		git config --global user.name "afafjaiofjasiofj"
		OR
		git config --local user.email "asfasdfas@asfaij.com"
git config --list
git clone [url]		copies all files from a remote repository onto your local machine
git add -a		add files from your working directory into your staging directory
git add .		add files from your folder into your staging directory
git add [file1] [file2], etc		adding specific files to your staging directory
git commit -m "my message"		create a new commit version from your staging directory
git push		sends your LOCAL changes to the REMOTE repository
git pull		is git fetch+ git merge
	git fetch	go to the remote git (gitlab) and retreive any changes it has
				but doesn't merge these changes with your local code
	git merge	take one branch's content and merge it into the current branch's code
git checkout [branchname]	changes the current branch to another branch
git checkout -b [branchname]	changes current branch IF it exists, if not a new branch will be created
git log			lists all commit versions
git revert		reverts an existing commit version
git stash		removes working directory changes (can be retrieved later)
git remote -v		lists your fetch and push URLs
git branch		is used for specific commands for a branch
git reset






IF YOU WANT TO CREATE YOUR OWN BRANCH

git checkout -b [your branch name]
git push --set-upstream origin [your branch name]





IF YOU WANT TO MERGE THE BATCH MAIN BRANCH WITH YOUR PERSONAL BATCH BRANCH:

git checkout main
git pull origin main
git checkout [your branch]
git merge main


OR

(from YOUR branch)
git pull origin main








https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet

https://learngitbranching.js.org/

https://www.youtube.com/watch?v=USjZcfj8yxE

https://www.youtube.com/watch?v=8JJ101D3knE




>>>>>>>>>>>>>>The different "areas" inside of the git system
HEAD- The most recent commit version

Staging Area-All changes staged/ready to be an "official" commit version

Working Directory- All active changes


>>>>>Note to Trevin>>>>>>
Time to integrate discord with gitlab
done

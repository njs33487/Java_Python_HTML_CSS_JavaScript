

>>>>>>>>>>>>>>>>>>>>>>What is data?
>information


>>>>>>What is a DataBase (DB)?
>a place to store information
>a structured and organized set of data
>Databases (DB) support manipulation and storage of data entries; DBs make management of data significantly easier.



>>>>>How is data structured in DBs?
>IN TABLES!!!!!
>A table will store a specific TYPE of "entity" (not a specific record)
	>>things like: users, cars, pokemon, etc
>A table has rows and columns
	>>>columns	= attributes AKA fields AKA properties
	>>>rows		= data entries AKA records
>EACH record in that table has an OFFICIAL unique identifier reffered as a "primary key"


	|			ANIMAL TABLE										|
	_______________________________________________________________
	| AnimalPK	| AnimalName	| AnimalSpecies	|	AnimalWeight	|
	------------------------------------------------------------------
	| 25			Ein			 	Doggo			15				|
	| 72			Scooby			Great Dane		120				|
	| 73			Scooby			Great Dane		120				|





>>>>>>>>>>>>>>>>>What is a Database Management System (DBMS)?
>The set of softwares which enbale access to a database, allows manipulation of data, and reporting of data.
>It also processes queries
>There are a few types of DBMS:
	>>Relational     <-------------we'll be using relational
	>>Object Oriented
	>>Navigational
	>>etc





>>>>>>>>>>>>>>>What is SQL?
>Structured Query Language
>It's a syntax used to communicate with the database (DBMS)


Types of SQL Languages:
-PostgreSQL
-Oracle SQL (aka PL/SQL)
-MySQL
-SQL Server
-etc






>>>>>>>>>>>>>>>>>>>>>What ......are the sublanguges of core SQL?

-DML- Data Manipulation Language
	>>DML operates on records/data
	>>These are the CRUD methods: create, read, update, delete
	>>Keywords: INSERT, SELECT, UPDATE, DELETE
				  (c)    (r)     (u)     (d)
	>>DML needs to be commited, the other sublanguages are generally AUTOCOMMIT


-DDL- Data Definition Language
	>>DDL operates on the schema
	>>The "schema" refers to your DB's structure (aka its containers like tables, views, etc)
		>>to put it another way "it's your DB's architecture"
	>>keywords: CREATE, ALTER, DROP, TRUNCATE
				 (c)     (u)    (d)     (sorta also delete)

-DQL- Data Query Language
	>>requests data from the table/schema
	>>some DBs consider select as its own sublanguage
	>>keywords: SELECT
		>>SELECT column1 FROM tableA WHERE attr1 = value;

-TCL- Transaction Control Language
	>>TCL deals with creating "transactions" and persisting data
	>>keywords: COMMIT, ROLLBACK, SAVEPOINT
	>>COMMIT is like doing a "git commit" & "git push"
	>>ROLLBACK is like a "git stash"

-DCL- Data Control Language
	>>DCL controls WHO has access to your data
	>>keywords: GRANT, REVOKE






>>>>>>>>What is a transaction?
>it's commit; a change to the state of the database (or group of changes)

>example
	insert (2records), delete (5records), update (9records), commit

	how many transaction have occurred?
	>1 transaction has occurred




>>>>>>>>>>But what is rollback? and what is savepoint?


>>example:

	originalState|------changes----------commit(state2)---------changes2---------rollback

	>after rollback, what state will we be in?
	>the answer: state 2! the rollback will delete changes back to the most RECENT commit
	
	
	
	originalState|-----changes-----savepoint mysave (state2)---------changes2----------rollback mysave

	>after the rollback, what state will we be in?
	>the answer: state 2! savepoint creates checkpoints that you can rollback to without rolling back EVERYTHING since the last commit


	originalState|-----changes-----savepoint mysave (state2)---------changes2----commit------rollback mysave

	>what happens now?
	>the answer: is that this can't happen, all the savepoints vanish after a commit






>>>>>>>>What are the properties/characteristics of a transaction?
>The ACID properties



>Atomicity
	>>"all or nothing"; a transaction cannot be broken down any further into separate parts

>Consistency
	>>after a transaction the state of your schema is intact
	>>the data should LOGICALLY be consistent; there shouldn't be a mix of old and new data

>Isolation
	>>transaction cannot interfere with one another
	>>math example:
			starting state: 10
			first transaction:  *2  +10
			second transaction: *3 -5

			correct order:		85 ...this is what is SHOULD be
			incorrect order: 	65...this is the result is we started first transaction
									then did second then back to first then back to second

>Durability
	>>changes you make to the state of the DB persist







>>>>>>>>>>>>>>>>MORE ON PRIMARY KEYS

>What is a primary key?
----the official unique identifier for the record

>>>Types of PKs:

(let's look at Natural vs Surrogate)

>Natural Key
	>it's a key that was obtained from outside of the database and is already unique
	>examples: pokemon's pokedex number, SSN, VIN, licensenumber, etc
	>issues?
		>>>>>>>>>what happens if the natural key is sensitive information? like a SSN
		>>>>>>>>>>>what happens if we can't guarantee the key's uniqueness
			>>people in real life have LITERALLY had the same SSN (or the same SSN as some dead person)
		>>>>>>>>>>>what happens if someone DOESN'T have a SSN?
		>>>>>>>>>>>>what happens if the natural key is changed in the outside world?
			>>and you CAN change your SSN


>Surrogate Key
	>it's a key that was genereated inside of this database to be used inside of this datatbase.
	>issues?
			>>>>>>not as space efficient as natural key



>Composite Key
	>two or more field/columns that create a unique value and act as the PKs
	>example:
		song title: "love song"
		artist: "Trevin and the wailers"
		compositive: ("Trevin and the wailers", "love song remix ft Mike")







>>>>>>>>>MULTIPLICITY
>>What is multiplicity?
>>>>>>>>Multiplicity describes the relationship between tables/entities



>MANY TO MANY
	>>>pokemon (a pokemon table) and trainer (a trainer table)
	>>>customer and products
	>>>teachers and students
	>>>chldren and parent

>ONE TO MANY
	>>>artist and albums
	>>>RevatureTrainer and associate
	>>>Employee and Reimbursement

>MANY TO ONE
	>>>albums and artist
	>>>associate and RevatureTrainer
	>>>Reimbursement and Employee

>ONE TO ONE
	>>>customer and default shipping address
	>>>one person and one life
	>>>person and SSN
	>>>person to dna (chimerism)





>>>>>>>>>>>REFERENTIAL INTEGRITY
>What is referential integrity
	>>the enforcement of foreign keys referencing valid and existing primary keys
	>>>essentially, referential integrity protects us from having orphan records


>>>What is an orphan record?
	>because FK references a PK, the FK is DEPENDENT upon the PK of the other record....
		>>meaning the PK record  is a parent record to the FK record (aka the child record)
	>So....if you delete the Parent record then the child record (FK) will no longer have a parent, it
		will be referred to as an "orphan record". REFERENTIAL INTEGRITY protects us from accidentially
		creating any orphan records. If you attempt a transaction that deletes a parent record then referential
		integrity will give us an error message.
	>To delete the parent record, you must first delete the children records OR you can set the children's FK to null (or a different parent)
		(also, you can look in "cascade on delete")







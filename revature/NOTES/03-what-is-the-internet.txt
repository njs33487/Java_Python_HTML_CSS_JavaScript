

What is the internet?
	it's basically a series of client-server interactions
	it's a giant messaging system

What is a URL?
	stands for Uniform Resource Locator
	-the URL has information to locate the computer where the requested resource
		is located AND it has information for WHAT resource you're looking for
	-consists of protocol + ip address/domain + port + URI
	
What is a protocol?
	-the rules for web communication
	-we overwhemlingly use HTTP or HTTPS when surfing the web
	-HTTP stands for Hyper Text Transfer Protocol
	-btw, there are many other types of protocols: ftp, smtp, tcp, udp, etc
	
	
	
	
	
	
What is a domain?
	-the directions/address to the computer & resources that you're looking for
	-the domain is a combination of ip address & port
	-(look into DNS as well, DNS is basically a phone book)
	
WHat is the port?
	-this is the speicific channel that the application you want to communicate with is listening to
	-each computer has somewhere around 65,000 ports (2^16) and only one application can listen on a single port as a time.
	-SO AFTER you use the ip address to find a computer, you need to find out WHICH port on that computer your target
		application is listening to
		
What is the URI (aka path)?
	-the URI stands for Uniform Resource Identifier
	-this is essentially the file path to the resource you're targeting; although, it doesn't have to be a file path and can be an alias.
		(it is LIKELY be an alias).
	-basically, the server may have HUNDREDS of resources....which one do you want?




	
	

---
NOW, let's talk abut the HTTP/HTTPS in a bit more detail since that is the
	protocol we'll be using the most

Let's start with the messaging system HTTP uses:

HTTP Request
   Header -contains metadata
	Common Headers include:
	-http verb/method
	-URL
	-content type
	-content length & size
	-http version
	-JWTs
   Body -contains target resource (dataformat: HTML, JSON, XML, text, etc)


HTTP Response
   Header -contains metadata
	Common Headers include:
	-status code
	-content type
	-content length & size
	-http version
	-date
   Body -contains target resource (dataformat: HTML, JSON, XML, text, etc)

>>>Status Code-
	contains information on how successful the client's request was.

	Status Code Ranges:
	100s- Informational
	200s- Success
		examples:
		200 - OK
		201 - Created
	300s- Redirection
	400s- Client Error
		examples:
		400- bad request
		401- unauthorized
		403- forbidden
		404- not found
		405- method not allowed
		410- gone
		418- I'm a teapot
	500s-  Server Error
		500- Internal Server Error
		504- Gateway Timeout

>>documentation for status codes https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

>>>Http Methods

>Types of Http methods
	>GET - retrieve a resource	(browser default)
	>POST - creates a resource (can be versatile)
	>PUT - updates a resource (replaces resources with a new resource)
	>DELETE -removes a resource
	>PATCH - partially update a resource
	>HEAD - operates like a GET method, but only returns the header information
	>OPTIONS
	>TRACE
	>COPY
	>CONNECT
	etc


----
Can a GET request delete resources?

Turns out...that these http methods will just translate to Java method so you can
create any logic you want in that method. The HTTP method/verb system is a convention, please stick
to the convention.

These Http Methods are conventions!!!
---






-------------------
>>>>>GET vs POST
	
	GET
		>GET transfer data using the URL (it displays the data out in the open)
		>GET can be bookmarked, allow people to save (or send to friends) query parameters
		>because GET uses the URL there is a size limit to a GET, because there is a size limit to a URL
		>don't say "get doesn't have a body" if someone asks, because it does
			>>isntead say something like "get usually doesn't have contents in its body"
	
	
	POST
		>POST transfers data using the body (it hides the data)
		>it's more secure, because data like passwords aren't right in the URL
		>theoretically limitless data in the body



	
	